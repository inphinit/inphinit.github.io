{"items":[{"t":"F","n":"\\inphinit_check_path","p":"[Global_Namespace].html#function_inphinit_check_path","d":"<p>case-sensitive check path</p>"},{"t":"F","n":"\\inphinit_error","p":"[Global_Namespace].html#function_inphinit_error","d":"<p>Function used from <code>set_error_handler</code> and trigger <code>App::trigger('error')</code></p>"},{"t":"F","n":"\\inphinit_sandbox","p":"[Global_Namespace].html#function_inphinit_sandbox","d":"<p>Sandbox include files</p>"},{"t":"C","n":"Inphinit\\App","p":"Inphinit/App.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Cache","p":"Inphinit/Cache.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Checkup","p":"Inphinit/Checkup.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Config","p":"Inphinit/Config.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Debug","p":"Inphinit/Debug.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Dom\\Document","p":"Inphinit/Dom/Document.html","d":null,"f":{"n":"Inphinit\\Dom","p":"Inphinit/Dom.html"}},{"t":"C","n":"Inphinit\\Dom\\DomException","p":"Inphinit/Dom/DomException.html","d":null,"f":{"n":"Inphinit\\Dom","p":"Inphinit/Dom.html"}},{"t":"C","n":"Inphinit\\Dom\\Selector","p":"Inphinit/Dom/Selector.html","d":null,"f":{"n":"Inphinit\\Dom","p":"Inphinit/Dom.html"}},{"t":"C","n":"Inphinit\\Exception","p":"Inphinit/Exception.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Experimental\\Dir","p":"Inphinit/Experimental/Dir.html","d":null,"f":{"n":"Inphinit\\Experimental","p":"Inphinit/Experimental.html"}},{"t":"C","n":"Inphinit\\Experimental\\Form","p":"Inphinit/Experimental/Form.html","d":null,"f":{"n":"Inphinit\\Experimental","p":"Inphinit/Experimental.html"}},{"t":"C","n":"Inphinit\\File","p":"Inphinit/File.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Helper","p":"Inphinit/Helper.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Http\\Negotiation","p":"Inphinit/Http/Negotiation.html","d":null,"f":{"n":"Inphinit\\Http","p":"Inphinit/Http.html"}},{"t":"C","n":"Inphinit\\Http\\Redirect","p":"Inphinit/Http/Redirect.html","d":null,"f":{"n":"Inphinit\\Http","p":"Inphinit/Http.html"}},{"t":"C","n":"Inphinit\\Http\\Request","p":"Inphinit/Http/Request.html","d":null,"f":{"n":"Inphinit\\Http","p":"Inphinit/Http.html"}},{"t":"C","n":"Inphinit\\Http\\Response","p":"Inphinit/Http/Response.html","d":null,"f":{"n":"Inphinit\\Http","p":"Inphinit/Http.html"}},{"t":"C","n":"Inphinit\\Http\\Status","p":"Inphinit/Http/Status.html","d":"<p>Constant with the most common HTTP codes</p>","f":{"n":"Inphinit\\Http","p":"Inphinit/Http.html"}},{"t":"C","n":"Inphinit\\Maintenance","p":"Inphinit/Maintenance.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Packages","p":"Inphinit/Packages.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Regex","p":"Inphinit/Regex.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Routing\\Group","p":"Inphinit/Routing/Group.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Routing\\Redirector","p":"Inphinit/Routing/Redirector.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Routing\\Resource","p":"Inphinit/Routing/Resource.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Routing\\Route","p":"Inphinit/Routing/Route.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Routing\\Router","p":"Inphinit/Routing/Router.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Routing\\Treaty","p":"Inphinit/Routing/Treaty.html","d":null,"f":{"n":"Inphinit\\Routing","p":"Inphinit/Routing.html"}},{"t":"C","n":"Inphinit\\Session","p":"Inphinit/Session.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Shell","p":"Inphinit/Shell.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Storage","p":"Inphinit/Storage.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Uri","p":"Inphinit/Uri.html","d":null,"f":{"n":"Inphinit","p":"Inphinit.html"}},{"t":"C","n":"Inphinit\\Viewing\\View","p":"Inphinit/Viewing/View.html","d":null,"f":{"n":"Inphinit\\Viewing","p":"Inphinit/Viewing.html"}},{"t":"M","n":"Inphinit\\App::config","p":"Inphinit/App.html#method_config","d":"<p>Get application configs</p>"},{"t":"M","n":"Inphinit\\App::trigger","p":"Inphinit/App.html#method_trigger","d":"<p>Trigger registered event</p>"},{"t":"M","n":"Inphinit\\App::state","p":"Inphinit/App.html#method_state","d":"<p>Return application state</p>"},{"t":"M","n":"Inphinit\\App::on","p":"Inphinit/App.html#method_on","d":"<p>Register an event</p>"},{"t":"M","n":"Inphinit\\App::off","p":"Inphinit/App.html#method_off","d":"<p>Unregister 1 or all events</p>"},{"t":"M","n":"Inphinit\\App::stop","p":"Inphinit/App.html#method_stop","d":"<p>Stop application, send HTTP status</p>"},{"t":"M","n":"Inphinit\\App::exec","p":"Inphinit/App.html#method_exec","d":"<p>Start application using routes</p>"},{"t":"M","n":"Inphinit\\App::dispatch","p":"Inphinit/App.html#method_dispatch","d":"<p>Dispatch before ready event if exec is Ok,\nor dispatch after finish event if stop() is executed</p>"},{"t":"M","n":"Inphinit\\Cache::__construct","p":"Inphinit/Cache.html#method___construct","d":"<p>Create a cache instance by route path</p>"},{"t":"M","n":"Inphinit\\Cache::allow","p":"Inphinit/Cache.html#method_allow","d":"<p>Check if is HEAD or GET, you can overwrite this method</p>"},{"t":"M","n":"Inphinit\\Cache::finish","p":"Inphinit/Cache.html#method_finish","d":"<p>Write cache</p>"},{"t":"M","n":"Inphinit\\Cache::match","p":"Inphinit/Cache.html#method_match","d":"<p>Check <code>HTTP_IF_MODIFIED_SINCE</code> and <code>HTTP_IF_NONE_MATCH</code> from server\nIf true you can send <code>304 Not Modified</code></p>"},{"t":"M","n":"Inphinit\\Cache::cached","p":"Inphinit/Cache.html#method_cached","d":"<p>Checks if page (from route) is already cached.</p>"},{"t":"M","n":"Inphinit\\Cache::write","p":"Inphinit/Cache.html#method_write","d":"<p>Write data in cache file.</p>"},{"t":"M","n":"Inphinit\\Cache::show","p":"Inphinit/Cache.html#method_show","d":"<p>Show cache content from current page (from route) in output</p>"},{"t":"M","n":"Inphinit\\Checkup::__construct","p":"Inphinit/Checkup.html#method___construct","d":"<p>Register a callback or script for a route</p>"},{"t":"M","n":"Inphinit\\Checkup::getErrors","p":"Inphinit/Checkup.html#method_getErrors","d":null},{"t":"M","n":"Inphinit\\Checkup::getWarnings","p":"Inphinit/Checkup.html#method_getWarnings","d":null},{"t":"M","n":"Inphinit\\Config::__construct","p":"Inphinit/Config.html#method___construct","d":"<p>Return items from a config file in a object (iterator or with -&gt;)</p>"},{"t":"M","n":"Inphinit\\Config::load","p":"Inphinit/Config.html#method_load","d":"<p>Create a Negotiation instance</p>"},{"t":"M","n":"Inphinit\\Config::reload","p":"Inphinit/Config.html#method_reload","d":"<p>Reload configuration from file</p>"},{"t":"M","n":"Inphinit\\Config::save","p":"Inphinit/Config.html#method_save","d":"<p>Save configuration to file</p>"},{"t":"M","n":"Inphinit\\Config::get","p":"Inphinit/Config.html#method_get","d":"<p>Get all values like array or get specific item by level (multidimensional) using path</p>"},{"t":"M","n":"Inphinit\\Config::set","p":"Inphinit/Config.html#method_set","d":"<p>Set value by path in specific level (multidimensional)</p>"},{"t":"M","n":"Inphinit\\Config::__get","p":"Inphinit/Config.html#method___get","d":"<p>Magic method for get specific item by -&gt;</p>"},{"t":"M","n":"Inphinit\\Config::__set","p":"Inphinit/Config.html#method___set","d":"<p>Magic method for set value (this method don't save data)</p>"},{"t":"M","n":"Inphinit\\Config::__isset","p":"Inphinit/Config.html#method___isset","d":"<p>Magic method for check if value exists in top-level</p>"},{"t":"M","n":"Inphinit\\Config::__unset","p":"Inphinit/Config.html#method___unset","d":"<p>Magic method for unset variable with <code>unset()</code> function</p>"},{"t":"M","n":"Inphinit\\Config::__destruct","p":"Inphinit/Config.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Debug::unregister","p":"Inphinit/Debug.html#method_unregister","d":"<p>Unregister debug events</p>"},{"t":"M","n":"Inphinit\\Debug::renderError","p":"Inphinit/Debug.html#method_renderError","d":"<p>Render a View to error</p>"},{"t":"M","n":"Inphinit\\Debug::renderPerformance","p":"Inphinit/Debug.html#method_renderPerformance","d":"<p>Render a View to show performance, memory and time to display page</p>"},{"t":"M","n":"Inphinit\\Debug::renderDefined","p":"Inphinit/Debug.html#method_renderDefined","d":"<p>Render a View to show performance and show declared classes</p>"},{"t":"M","n":"Inphinit\\Debug::view","p":"Inphinit/Debug.html#method_view","d":"<p>Register a debug views</p>"},{"t":"M","n":"Inphinit\\Debug::performance","p":"Inphinit/Debug.html#method_performance","d":"<p>Get memory usage and you can also use it to calculate runtime.</p>"},{"t":"M","n":"Inphinit\\Debug::classes","p":"Inphinit/Debug.html#method_classes","d":"<p>Get declared classes</p>"},{"t":"M","n":"Inphinit\\Debug::functions","p":"Inphinit/Debug.html#method_functions","d":"<p>Get declared functions</p>"},{"t":"M","n":"Inphinit\\Debug::constants","p":"Inphinit/Debug.html#method_constants","d":"<p>Get defined constants</p>"},{"t":"M","n":"Inphinit\\Debug::source","p":"Inphinit/Debug.html#method_source","d":"<p>Get snippet from a file</p>"},{"t":"M","n":"Inphinit\\Debug::caller","p":"Inphinit/Debug.html#method_caller","d":"<p>Get backtrace php scripts</p>"},{"t":"M","n":"Inphinit\\Debug::searcherror","p":"Inphinit/Debug.html#method_searcherror","d":"<p>Convert error message in a link, see <code>system/configs/debug.php</code></p>"},{"t":"M","n":"Inphinit\\Dom\\Document::__construct","p":"Inphinit/Dom/Document.html#method___construct","d":"<p>Create a Document instance</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::reporting","p":"Inphinit/Dom/Document.html#method_reporting","d":"<p>Set level error for exception, set <code>LIBXML_ERR_NONE</code> (or <code>0</code> - zero) for disable exceptions.</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::fromArray","p":"Inphinit/Dom/Document.html#method_fromArray","d":"<p>Convert a array in node elements</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::toJson","p":"Inphinit/Dom/Document.html#method_toJson","d":"<p>Convert DOM to JSON string</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::toArray","p":"Inphinit/Dom/Document.html#method_toArray","d":"<p>Convert DOM to Array</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::__toString","p":"Inphinit/Dom/Document.html#method___toString","d":"<p>Magic method, return a well-formed XML string</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::save","p":"Inphinit/Dom/Document.html#method_save","d":"<p>Save file to location</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::getNamespaces","p":"Inphinit/Dom/Document.html#method_getNamespaces","d":"<p>Get namespace attributes from root element or specific element</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::loadXML","p":"Inphinit/Dom/Document.html#method_loadXML","d":"<p>Load XML from a string</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::load","p":"Inphinit/Dom/Document.html#method_load","d":"<p>Load XML from a file</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::loadHTML","p":"Inphinit/Dom/Document.html#method_loadHTML","d":"<p>Load HTML from a string</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::loadHTMLFile","p":"Inphinit/Dom/Document.html#method_loadHTMLFile","d":"<p>Load HTML from a file</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::query","p":"Inphinit/Dom/Document.html#method_query","d":"<p>Use query-selector like CSS, jQuery, querySelectorAll</p>"},{"t":"M","n":"Inphinit\\Dom\\Document::first","p":"Inphinit/Dom/Document.html#method_first","d":"<p>Use query-selector like CSS, jQuery, querySelector</p>"},{"t":"M","n":"Inphinit\\Dom\\DomException::__construct","p":"Inphinit/Dom/DomException.html#method___construct","d":"<p>Raise an exception</p>"},{"t":"M","n":"Inphinit\\Dom\\Selector::count","p":"Inphinit/Dom/Selector.html#method_count","d":"<p>Count all nodes matching the given CSS selector</p>"},{"t":"M","n":"Inphinit\\Dom\\Selector::get","p":"Inphinit/Dom/Selector.html#method_get","d":"<p>Returns a \\DOMNodeList containing all nodes matching the given CSS selector</p>"},{"t":"M","n":"Inphinit\\Exception::__construct","p":"Inphinit/Exception.html#method___construct","d":"<p>Raise an exception</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::__construct","p":"Inphinit/Experimental/Dir.html#method___construct","d":"<p>Return items from a folder</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::root","p":"Inphinit/Experimental/Dir.html#method_root","d":"<p>Return items from root project folder (probably, will depend on the setting\nof the <code>INPHINIT_ROOT</code> constant)</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::storage","p":"Inphinit/Experimental/Dir.html#method_storage","d":"<p>Return items from storage folder</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::application","p":"Inphinit/Experimental/Dir.html#method_application","d":"<p>Return items from application folder</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::rewind","p":"Inphinit/Experimental/Dir.html#method_rewind","d":"<p>Resets the directory stream to the beginning of the directory</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::current","p":"Inphinit/Experimental/Dir.html#method_current","d":"<p>Get current file with type, path and filename\nThe entries are returned in the order in which they are stored by the filesystem.</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::key","p":"Inphinit/Experimental/Dir.html#method_key","d":"<p>Get current position in handle</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::next","p":"Inphinit/Experimental/Dir.html#method_next","d":"<p>Move forward to next file</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::valid","p":"Inphinit/Experimental/Dir.html#method_valid","d":"<p>Check if pointer is valid</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::count","p":"Inphinit/Experimental/Dir.html#method_count","d":"<p>Count files in folder, can br used by <code>count($instance)</code> funciton</p>"},{"t":"M","n":"Inphinit\\Experimental\\Dir::__destruct","p":"Inphinit/Experimental/Dir.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Experimental\\Form::xhtml","p":"Inphinit/Experimental/Form.html#method_xhtml","d":"<p>Define new forms for use xhtml (<code>&lt;input /&gt;</code>) or html format (<code>&lt;input&gt;</code>)</p>"},{"t":"M","n":"Inphinit\\Experimental\\Form::setup","p":"Inphinit/Experimental/Form.html#method_setup","d":"<p>Define default attributes for all elements</p>"},{"t":"M","n":"Inphinit\\Experimental\\Form::comboRange","p":"Inphinit/Experimental/Form.html#method_comboRange","d":"<p>Generate combo by range</p>"},{"t":"M","n":"Inphinit\\Experimental\\Form::combo","p":"Inphinit/Experimental/Form.html#method_combo","d":"<p>Create a select combo based in an array</p>"},{"t":"M","n":"Inphinit\\Experimental\\Form::input","p":"Inphinit/Experimental/Form.html#method_input","d":"<p>Create a input or textarea</p>"},{"t":"M","n":"Inphinit\\File::exists","p":"Inphinit/File.html#method_exists","d":"<p>Check if file exists using case-sensitive,\nFor help developers who using Windows OS and using unix-like for production</p>"},{"t":"M","n":"Inphinit\\File::permissions","p":"Inphinit/File.html#method_permissions","d":"<p>Get file/folder permissions in a format more readable.</p>"},{"t":"M","n":"Inphinit\\File::mime","p":"Inphinit/File.html#method_mime","d":"<p>Get mimetype from file, return <code>false</code> if file is invalid</p>"},{"t":"M","n":"Inphinit\\File::encoding","p":"Inphinit/File.html#method_encoding","d":"<p>Determines whether the file is binary</p>"},{"t":"M","n":"Inphinit\\File::output","p":"Inphinit/File.html#method_output","d":"<p>Show file in output, if use ob_start is auto used ob_flush. You can set delay in microseconds for cycles</p>"},{"t":"M","n":"Inphinit\\File::portion","p":"Inphinit/File.html#method_portion","d":"<p>Read excerpt from a file</p>"},{"t":"M","n":"Inphinit\\File::lines","p":"Inphinit/File.html#method_lines","d":"<p>Read lines from a file</p>"},{"t":"M","n":"Inphinit\\File::clearstat","p":"Inphinit/File.html#method_clearstat","d":"<p>Clear state files and clear size files in <code>Inphinit\\File::size</code></p>"},{"t":"M","n":"Inphinit\\Helper::parseVersion","p":"Inphinit/Helper.html#method_parseVersion","d":"<p>Parse version format</p>"},{"t":"M","n":"Inphinit\\Helper::toAscii","p":"Inphinit/Helper.html#method_toAscii","d":"<p>Convert string to ASCII</p>"},{"t":"M","n":"Inphinit\\Helper::capitalize","p":"Inphinit/Helper.html#method_capitalize","d":"<p>Capitalize words using hyphen or a custom delimiter.</p>"},{"t":"M","n":"Inphinit\\Helper::extract","p":"Inphinit/Helper.html#method_extract","d":"<p>Read array or object by path using dot</p>"},{"t":"M","n":"Inphinit\\Helper::iterable","p":"Inphinit/Helper.html#method_iterable","d":"<p>Equivalent to <code>is_iterable</code> from PHP-7.1.0+</p>"},{"t":"M","n":"Inphinit\\Helper::seq","p":"Inphinit/Helper.html#method_seq","d":"<p>Check if array is sequential, like ['foo', 'bar']</p>"},{"t":"M","n":"Inphinit\\Helper::assoc","p":"Inphinit/Helper.html#method_assoc","d":"<p>Check if array is associative, like [ 'bar' =&gt; foo', 'baz' =&gt; 'bar']</p>"},{"t":"M","n":"Inphinit\\Helper::ksort","p":"Inphinit/Helper.html#method_ksort","d":"<p>Check if array is associative, like [ 'bar' =&gt; foo', 'baz' =&gt; 'bar']</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::__construct","p":"Inphinit/Http/Negotiation.html#method___construct","d":"<p>Create a Negotiation instance</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::__destruct","p":"Inphinit/Http/Negotiation.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Http\\Negotiation::fromString","p":"Inphinit/Http/Negotiation.html#method_fromString","d":"<p>Create a Negotiation instance based in string (eg.: <code>curl_opt(..., CURL_OPT_HEADER, true)</code>)</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::acceptLanguage","p":"Inphinit/Http/Negotiation.html#method_acceptLanguage","d":"<p>Get all languages by <code>Accept-Language</code> header sorted by q-factor (defined by <code>$sort</code>)</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::acceptCharset","p":"Inphinit/Http/Negotiation.html#method_acceptCharset","d":"<p>Get all languages by <code>Accept-Charset</code> header and sort by q-factor (defined by <code>$sort</code>)</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::acceptEncoding","p":"Inphinit/Http/Negotiation.html#method_acceptEncoding","d":"<p>Get all languages by <code>Accept-Encoding</code> header and sort by q-factor (defined by <code>$sort</code>)</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::accept","p":"Inphinit/Http/Negotiation.html#method_accept","d":"<p>Get all document types by <code>Accept</code> header and sorted by q-factor (defined by <code>$sort</code>)</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::getLanguage","p":"Inphinit/Http/Negotiation.html#method_getLanguage","d":"<p>Get the first language with with the greatest q-factor,\nif it does not exist then return the value of <code>$alternative</code></p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::getCharset","p":"Inphinit/Http/Negotiation.html#method_getCharset","d":"<p>Get the first charset with with the greatest q-factor,\nif it does not exist then return the value of <code>$alternative</code></p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::getEncoding","p":"Inphinit/Http/Negotiation.html#method_getEncoding","d":"<p>Get the first encoding with with the greatest q-factor,\nif it does not exist then return the value of <code>$alternative</code></p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::getAccept","p":"Inphinit/Http/Negotiation.html#method_getAccept","d":"<p>Get the first &quot;document type&quot; with the greatest q-factor,\nif it does not exist then return the value of <code>$alternative</code></p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::header","p":"Inphinit/Http/Negotiation.html#method_header","d":"<p>Parse any header with q-factor value</p>"},{"t":"M","n":"Inphinit\\Http\\Negotiation::qFactor","p":"Inphinit/Http/Negotiation.html#method_qFactor","d":"<p>Parse and sort a custom value with q-factor</p>"},{"t":"M","n":"Inphinit\\Http\\Redirect::only","p":"Inphinit/Http/Redirect.html#method_only","d":"<p>Redirect and stop application execution</p>"},{"t":"M","n":"Inphinit\\Http\\Redirect::to","p":"Inphinit/Http/Redirect.html#method_to","d":"<p>Redirects to a valid path within the application</p>"},{"t":"M","n":"Inphinit\\Http\\Redirect::back","p":"Inphinit/Http/Redirect.html#method_back","d":"<p>Return to redirect to new path</p>"},{"t":"M","n":"Inphinit\\Http\\Request::path","p":"Inphinit/Http/Request.html#method_path","d":"<p>Get current HTTP path or route path</p>"},{"t":"M","n":"Inphinit\\Http\\Request::is","p":"Inphinit/Http/Request.html#method_is","d":"<p>Check if is a specific HTTP method, HTTPS, and xmlhttprequest (Depends on how an ajax call was made)</p>"},{"t":"M","n":"Inphinit\\Http\\Request::header","p":"Inphinit/Http/Request.html#method_header","d":"<p>Get HTTP headers from current request</p>"},{"t":"M","n":"Inphinit\\Http\\Request::query","p":"Inphinit/Http/Request.html#method_query","d":"<p>Get querystring, this method is useful for anyone who uses IIS.</p>"},{"t":"M","n":"Inphinit\\Http\\Request::get","p":"Inphinit/Http/Request.html#method_get","d":"<p>Get a value from <code>$_GET</code>, if <code>$_GET</code> is a array multidimensional, you can use dot like path:\nIf <code>$_GET['foo']</code> returns this <code>array( 'baz' =&gt; 'bar' =&gt; 1);</code> use <code>Request::get('foo.bar.baz');</code>\nfor return <code>1</code></p>"},{"t":"M","n":"Inphinit\\Http\\Request::post","p":"Inphinit/Http/Request.html#method_post","d":"<p>Get a value from $_POST, if $_POST is a array multidimensional, you can use dot like path:\nIf $_POST['foo'] returns this array( 'baz' =&gt; 'bar' =&gt; 1); use Request::post('foo.bar.baz');</p>"},{"t":"M","n":"Inphinit\\Http\\Request::cookie","p":"Inphinit/Http/Request.html#method_cookie","d":"<p>Get a value from <code>$_COOKIE</code> (support path using dots)</p>"},{"t":"M","n":"Inphinit\\Http\\Request::file","p":"Inphinit/Http/Request.html#method_file","d":"<p>Get a value from <code>$_FILES</code> (support path using dots)</p>"},{"t":"M","n":"Inphinit\\Http\\Request::raw","p":"Inphinit/Http/Request.html#method_raw","d":"<p>Get a value input handler</p>"},{"t":"M","n":"Inphinit\\Http\\Request::json","p":"Inphinit/Http/Request.html#method_json","d":"<p>Get a value input handler</p>"},{"t":"M","n":"Inphinit\\Http\\Request::xml","p":"Inphinit/Http/Request.html#method_xml","d":"<p>Create a Document instance from HTTP request</p>"},{"t":"M","n":"Inphinit\\Http\\Response::status","p":"Inphinit/Http/Response.html#method_status","d":"<p>Get or set status code and return last status code. Note: if set status work, Event::on('changestatus') is trigged</p>"},{"t":"M","n":"Inphinit\\Http\\Response::header","p":"Inphinit/Http/Response.html#method_header","d":"Short"},{"t":"M","n":"Inphinit\\Http\\Response::content","p":"Inphinit/Http/Response.html#method_content","d":"<p>Get or set status code and return last status code</p>"},{"t":"M","n":"Inphinit\\Http\\Response::cache","p":"Inphinit/Http/Response.html#method_cache","d":"<p>Set header to cache page Response::cache($seconds, $modified = 0);</p>"},{"t":"M","n":"Inphinit\\Http\\Response::download","p":"Inphinit/Http/Response.html#method_download","d":"<p>Force download current page</p>"},{"t":"M","n":"Inphinit\\Http\\Status::message","p":"Inphinit/Http/Status.html#method_message","d":"<p>Get message by HTTP code</p>"},{"t":"M","n":"Inphinit\\Maintenance::down","p":"Inphinit/Maintenance.html#method_down","d":"<p>Down site to maintenance mode</p>"},{"t":"M","n":"Inphinit\\Maintenance::up","p":"Inphinit/Maintenance.html#method_up","d":"<p>Up site</p>"},{"t":"M","n":"Inphinit\\Maintenance::enable","p":"Inphinit/Maintenance.html#method_enable","d":"<p>Enable/disable maintenance mode</p>"},{"t":"M","n":"Inphinit\\Maintenance::ignoreif","p":"Inphinit/Maintenance.html#method_ignoreif","d":"<p>Up the site only in certain conditions, eg. the site administrator of the IP.</p>"},{"t":"M","n":"Inphinit\\Packages::__construct","p":"Inphinit/Packages.html#method___construct","d":"<p>Create a <code>Inphinit\\Packages</code> instance.</p>"},{"t":"M","n":"Inphinit\\Packages::logs","p":"Inphinit/Packages.html#method_logs","d":"<p>Get log</p>"},{"t":"M","n":"Inphinit\\Packages::auto","p":"Inphinit/Packages.html#method_auto","d":"<p>Auto import composer packages</p>"},{"t":"M","n":"Inphinit\\Packages::inAutoload","p":"Inphinit/Packages.html#method_inAutoload","d":"<p>Load <code>./system/boot/namespaces.php</code> classes</p>"},{"t":"M","n":"Inphinit\\Packages::classmap","p":"Inphinit/Packages.html#method_classmap","d":"<p>Load <code>autoload_classmap.php</code> classes</p>"},{"t":"M","n":"Inphinit\\Packages::psr0","p":"Inphinit/Packages.html#method_psr0","d":"<p>Load <code>autoload_namespaces.php</code> classes, used by PSR-0 packages</p>"},{"t":"M","n":"Inphinit\\Packages::psr4","p":"Inphinit/Packages.html#method_psr4","d":"<p>Load <code>autoload_psr4.php</code> classes, used by PSR-4 packages</p>"},{"t":"M","n":"Inphinit\\Packages::save","p":"Inphinit/Packages.html#method_save","d":"<p>Save imported packages path to file in PHP format</p>"},{"t":"M","n":"Inphinit\\Packages::getLibs","p":"Inphinit/Packages.html#method_getLibs","d":"<p>Return array of libs</p>"},{"t":"M","n":"Inphinit\\Packages::version","p":"Inphinit/Packages.html#method_version","d":"<p>Get package version from composer.lock file</p>"},{"t":"M","n":"Inphinit\\Packages::__destruct","p":"Inphinit/Packages.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Regex::parse","p":"Inphinit/Regex.html#method_parse","d":"<p>Parse string like.: <code>{:[a-z]+:}.domain.com</code> or <code>/user/{:[a-z]+:}/{:\\d+:}</code> to regex</p>"},{"t":"M","n":"Inphinit\\Regex::args","p":"Inphinit/Regex.html#method_args","d":"<p>Convert one argument like <code>{:[a-z]+:}</code> to <code>([a-z]+)</code>,\nthis function is used by <code>Router::parse</code></p>"},{"t":"M","n":"Inphinit\\Routing\\Group::create","p":"Inphinit/Routing/Group.html#method_create","d":"<p>Create a new route group</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::prefixNS","p":"Inphinit/Routing/Group.html#method_prefixNS","d":"<p>Define namespace prefix for group</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::domain","p":"Inphinit/Routing/Group.html#method_domain","d":"<p>Define domain for group</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::path","p":"Inphinit/Routing/Group.html#method_path","d":"<p>Define path for group</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::secure","p":"Inphinit/Routing/Group.html#method_secure","d":"<p>Access only with HTTPS or only HTTP</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::then","p":"Inphinit/Routing/Group.html#method_then","d":"<p>Define callback for group, this callback is executed if the request meets the group\nsettings</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::checkSecurity","p":"Inphinit/Routing/Group.html#method_checkSecurity","d":"<p>Method is used for check if HTTPS or HTTP or both</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::checkDomain","p":"Inphinit/Routing/Group.html#method_checkDomain","d":"<p>Method is used for check domain and return arguments if using regex</p>"},{"t":"M","n":"Inphinit\\Routing\\Group::checkPath","p":"Inphinit/Routing/Group.html#method_checkPath","d":"<p>Method is used for check path</p>"},{"t":"M","n":"Inphinit\\Routing\\Redirector::route","p":"Inphinit/Routing/Redirector.html#method_route","d":"<p>Redirect to route based</p>"},{"t":"M","n":"Inphinit\\Routing\\Redirector::action","p":"Inphinit/Routing/Redirector.html#method_action","d":"<p>Redirect to route based</p>"},{"t":"M","n":"Inphinit\\Routing\\Resource::route","p":"Inphinit/Routing/Resource.html#method_route","d":"<p>Define routes based on class methods</p>"},{"t":"M","n":"Inphinit\\Routing\\Resource::action","p":"Inphinit/Routing/Resource.html#method_action","d":"<p>Define routes based on class methods</p>"},{"t":"M","n":"Inphinit\\Routing\\Resource::output","p":"Inphinit/Routing/Resource.html#method_output","d":"<p>Overwrite output</p>"},{"t":"M","n":"Inphinit\\Routing\\Route::set","p":"Inphinit/Routing/Route.html#method_set","d":"<p>Register or remove a action from controller for a route</p>"},{"t":"M","n":"Inphinit\\Routing\\Route::get","p":"Inphinit/Routing/Route.html#method_get","d":"<p>Get action controller from current route</p>"},{"t":"M","n":"Inphinit\\Routing\\Router::find","p":"Inphinit/Routing/Router.html#method_find","d":"<p>Get params from routes using regex</p>"},{"t":"M","n":"Inphinit\\Routing\\Treaty::route","p":"Inphinit/Routing/Treaty.html#method_route","d":"<p>Define routes based on class methods</p>"},{"t":"M","n":"Inphinit\\Routing\\Treaty::action","p":"Inphinit/Routing/Treaty.html#method_action","d":"<p>Define routes based on class methods</p>"},{"t":"M","n":"Inphinit\\Routing\\Treaty::parsePath","p":"Inphinit/Routing/Treaty.html#method_parsePath","d":"<p>Overwrite path parser</p>"},{"t":"M","n":"Inphinit\\Session::__construct","p":"Inphinit/Session.html#method___construct","d":"<p>Create cookie session and configure session</p>"},{"t":"M","n":"Inphinit\\Session::commit","p":"Inphinit/Session.html#method_commit","d":"<p>Lock session file and save variables</p>"},{"t":"M","n":"Inphinit\\Session::regenerate","p":"Inphinit/Session.html#method_regenerate","d":"<p>Regenerate ID</p>"},{"t":"M","n":"Inphinit\\Session::get","p":"Inphinit/Session.html#method_get","d":"<p>Get all values like array or get specific item by level (multidimensional) using path</p>"},{"t":"M","n":"Inphinit\\Session::__clone","p":"Inphinit/Session.html#method___clone","d":"<p>Prevent clone session object</p>"},{"t":"M","n":"Inphinit\\Session::__get","p":"Inphinit/Session.html#method___get","d":"<p>Magic method for get session variables (this method also returns variables that have not yet\nbeen committed)</p>"},{"t":"M","n":"Inphinit\\Session::__set","p":"Inphinit/Session.html#method___set","d":"<p>Magic method for set session variables (this method don't commit data)</p>"},{"t":"M","n":"Inphinit\\Session::__isset","p":"Inphinit/Session.html#method___isset","d":"<p>Magic method for check if variable is setted (this method also returns variables that have not yet\nbeen committed)</p>"},{"t":"M","n":"Inphinit\\Session::__unset","p":"Inphinit/Session.html#method___unset","d":"<p>Magic method for unset variable with <code>unset()</code> function</p>"},{"t":"M","n":"Inphinit\\Session::__destruct","p":"Inphinit/Session.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Shell::__construct","p":"Inphinit/Shell.html#method___construct","d":"<p>Create a Shell instance for use CLI interface</p>"},{"t":"M","n":"Inphinit\\Shell::arguments","p":"Inphinit/Shell.html#method_arguments","d":"<p>Get arguments</p>"},{"t":"M","n":"Inphinit\\Shell::hasArgs","p":"Inphinit/Shell.html#method_hasArgs","d":"<p>Check if using arguments</p>"},{"t":"M","n":"Inphinit\\Shell::isCli","p":"Inphinit/Shell.html#method_isCli","d":"<p>Check if script is executed in CLI</p>"},{"t":"M","n":"Inphinit\\Shell::input","p":"Inphinit/Shell.html#method_input","d":"<p>Get input data</p>"},{"t":"M","n":"Inphinit\\Shell::observer","p":"Inphinit/Shell.html#method_observer","d":"<p>Add callback event to input</p>"},{"t":"M","n":"Inphinit\\Shell::__destruct","p":"Inphinit/Shell.html#method___destruct","d":null},{"t":"M","n":"Inphinit\\Storage::path","p":"Inphinit/Storage.html#method_path","d":"<p>Get absolute path from storage location</p>"},{"t":"M","n":"Inphinit\\Storage::resolve","p":"Inphinit/Storage.html#method_resolve","d":"<p>Convert path to storage path</p>"},{"t":"M","n":"Inphinit\\Storage::autoclean","p":"Inphinit/Storage.html#method_autoclean","d":"<p>Clear old files in a folder from storage path</p>"},{"t":"M","n":"Inphinit\\Storage::temp","p":"Inphinit/Storage.html#method_temp","d":"<p>Create a tmp in storage/tmp folder</p>"},{"t":"M","n":"Inphinit\\Storage::write","p":"Inphinit/Storage.html#method_write","d":"<p>Create a file in a folder or overwrite existing file</p>"},{"t":"M","n":"Inphinit\\Storage::put","p":"Inphinit/Storage.html#method_put","d":"<p>Create a file in a folder in storage or append data to existing file</p>"},{"t":"M","n":"Inphinit\\Storage::remove","p":"Inphinit/Storage.html#method_remove","d":"<p>Delete a file in storage</p>"},{"t":"M","n":"Inphinit\\Storage::createFolder","p":"Inphinit/Storage.html#method_createFolder","d":"<p>Create a folder in storage using 0700 permission (if unix-like)</p>"},{"t":"M","n":"Inphinit\\Storage::removeFolder","p":"Inphinit/Storage.html#method_removeFolder","d":"<p>Remove recursive folders in storage folder</p>"},{"t":"M","n":"Inphinit\\Uri::encodepath","p":"Inphinit/Uri.html#method_encodepath","d":"<p>Convert text to URL format</p>"},{"t":"M","n":"Inphinit\\Uri::canonpath","p":"Inphinit/Uri.html#method_canonpath","d":"<p>Canonicalize paths</p>"},{"t":"M","n":"Inphinit\\Uri::normalize","p":"Inphinit/Uri.html#method_normalize","d":"<p>Normalize URL, include canonicalized path</p>"},{"t":"M","n":"Inphinit\\Uri::canonquery","p":"Inphinit/Uri.html#method_canonquery","d":"<p>Reorder querystring by &quot;keys&quot;\nif: <code>Uri::canonquery('z=1&amp;u=2&amp;a=5')</code> returns <code>a=5&amp;u=2&amp;z=1</code></p>"},{"t":"M","n":"Inphinit\\Viewing\\View::forceRender","p":"Inphinit/Viewing/View.html#method_forceRender","d":"<p>Force the <code>View::render</code> method to render at the time it is called</p>"},{"t":"M","n":"Inphinit\\Viewing\\View::dispatch","p":"Inphinit/Viewing/View.html#method_dispatch","d":"<p>Starts rendering of registered views. After calling this method call it will automatically\nexecute <code>View::forceRender()</code></p>"},{"t":"M","n":"Inphinit\\Viewing\\View::data","p":"Inphinit/Viewing/View.html#method_data","d":"<p>Share or remove shared data to Views, shared variables will be added as variables to the views that will be executed later</p>"},{"t":"M","n":"Inphinit\\Viewing\\View::exists","p":"Inphinit/Viewing/View.html#method_exists","d":"<p>Check if view exists in ./application/View/ folder</p>"},{"t":"M","n":"Inphinit\\Viewing\\View::render","p":"Inphinit/Viewing/View.html#method_render","d":"<p>Register or render a View. If View is registered this method returns the index number from View</p>"},{"t":"M","n":"Inphinit\\Viewing\\View::remove","p":"Inphinit/Viewing/View.html#method_remove","d":"<p>Remove a registered View by index</p>"},{"t":"N","n":"","p":"[Global_Namespace].html"},{"t":"N","n":"Inphinit","p":"Inphinit.html"},{"t":"N","n":"Inphinit\\Dom","p":"Inphinit/Dom.html"},{"t":"N","n":"Inphinit\\Experimental","p":"Inphinit/Experimental.html"},{"t":"N","n":"Inphinit\\Http","p":"Inphinit/Http.html"},{"t":"N","n":"Inphinit\\Routing","p":"Inphinit/Routing.html"},{"t":"N","n":"Inphinit\\Viewing","p":"Inphinit/Viewing.html"}]}
